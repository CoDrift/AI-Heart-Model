# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XuHwFZfrC32voTDv-QV9gRbk4vw4KThy
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import zipfile

with zipfile.ZipFile("archive.zip", "r") as zip_ref:
    zip_ref.extractall("dataset_directory")

# !ls

# !ls dataset_directory

# Load the CSV files into DataFrames
mitbih_train = pd.read_csv("mitbih_train.csv", header=None)
mitbih_test = pd.read_csv("mitbih_test.csv", header=None)
ptbdb_abnormal = pd.read_csv("ptbdb_abnormal.csv", header=None)
ptbdb_normal = pd.read_csv("ptbdb_normal.csv", header=None)

import pandas as pd

# Load the CSV files into DataFrames
mitbih_train = pd.read_csv("dataset_directory/mitbih_train.csv", header=None)
mitbih_test = pd.read_csv("dataset_directory/mitbih_test.csv", header=None)
ptbdb_abnormal = pd.read_csv("dataset_directory/ptbdb_abnormal.csv", header=None)
ptbdb_normal = pd.read_csv("dataset_directory/ptbdb_normal.csv", header=None)

# Combine the PTBDB datasets into one and assign labels
ptbdb_abnormal['label'] = 1  # Abnormal ECGs
ptbdb_normal['label'] = 0    # Normal ECGs
ptbdb_combined = pd.concat([ptbdb_abnormal, ptbdb_normal], axis=0)

# Split the data and labels
X = mitbih_train.iloc[:, :-1].values
y = mitbih_train.iloc[:, -1].values

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)

model = keras.Sequential([
    keras.layers.Input(shape=(X_train.shape[1],)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=64, validation_data=(X_val, y_val))

# Load the test dataset
X_test = mitbih_test.iloc[:, :-1].values
y_test = mitbih_test.iloc[:, -1].values

# Standardize the test features
X_test = scaler.transform(X_test)

# Evaluate the model
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}")

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Get model predictions
y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)  # Convert probabilities to binary predictions (e.g., 1 for abnormal, 0 for normal)

# Create a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Abnormal'], yticklabels=['Normal', 'Abnormal'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')

model.save("model.keras")

plt.show()